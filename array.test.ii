# 0 "array.test.cpp"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "array.test.cpp"
# 1 "test.hpp" 1



# 1 "format.hpp" 1



# 1 "string.hpp" 1



# 1 "vector.hpp" 1



# 1 "utility.hpp" 1



# 1 "meta.hpp" 1



namespace lib
{
  template <typename first_t, typename second_t>
  constexpr bool same_v = false;

  template <typename first_t>
  constexpr bool same_v<first_t, first_t> = true;

  template <typename first_t, typename second_t>
  concept same_as = same_v<first_t, second_t>;

  template<typename first_t, typename second_t>
  concept not_same_as = not same_as<first_t, second_t>;

  template <typename char_t>
  concept character =
      same_as<char_t, char> or
      same_as<char_t, wchar_t>;

  template <typename type_t>
  concept integer =
      same_as<type_t, short> or
      same_as<type_t, unsigned short> or
      same_as<type_t, const short> or
      same_as<type_t, const unsigned short> or
      same_as<type_t, int> or
      same_as<type_t, unsigned int> or
      same_as<type_t, const int> or
      same_as<type_t, const unsigned int> or
      same_as<type_t, long> or
      same_as<type_t, unsigned long> or
      same_as<type_t, const long> or
      same_as<type_t, const unsigned long> or
      same_as<type_t, long long> or
      same_as<type_t, unsigned long long> or
      same_as<type_t, const long long> or
      same_as<type_t, const unsigned long long>;

  namespace __meta
  {
    template <typename type_t>
    struct remove_reference
    {
      using type = type_t;
    };

    template <typename type_t>
    struct remove_reference<type_t &>
    {
      using type = type_t;
    };

    template <typename type_t>
    struct remove_reference<type_t &&>
    {
      using type = type_t;
    };
  }

  template <typename type_t>
  using remove_reference = typename __meta::remove_reference<type_t>::type;

  namespace __meta
  {
    template <typename type_t>
    struct remove_const
    {
      using type = type_t;
    };

    template <typename type_t>
    struct remove_const<const type_t>
    {
      using type = type_t;
    };
  }

  template <typename type_t>
  using remove_const = typename __meta::remove_const<type_t>::type;

  template <typename type_t>
  using remove_const_ref = remove_const<remove_reference<type_t>>;

  namespace __impl
  {
    template <typename type_t, bool constness>
    struct constly;

    template <typename type_t>
    struct constly<type_t, true>
    {
      using type = const type_t;
    };

    template <typename type_t>
    struct constly<type_t, false>
    {
      using type = type_t;
    };
  }

  template <typename type_t, bool constness>
  using constly = typename __impl::constly<type_t, constness>::type;


}
# 5 "utility.hpp" 2
# 1 "result.hpp" 1



# 1 "utility.hpp" 1
# 5 "result.hpp" 2

namespace lib
{
  template <
      typename type_t,
      typename unexpected_t>
  class result
  {
    union
    {
      type_t val;
      unexpected_t unexp;
    };

    bool has_val;

  public:
    constexpr explicit result(
        const type_t &_val)
        : val(_val), has_val(true) {}

    constexpr explicit result(
        type_t &&_val)
        : val(move(_val)), has_val(true) {}

    constexpr explicit result(
        const unexpected_t &_unexp)
        : unexp(_unexp), has_val(false) {}

    constexpr explicit result(
        unexpected_t &&_unexp)
        : unexp(move(_unexp)), has_val(false) {}

    ~result()
    {
      if (has_val)
        val.~type_t();
      else
        unexp.~unexpected_t();
    }

    constexpr result(
        const result &o)
    {
      has_val = o.has_val;

      if (has_val)
        val = o.val;
      else
        unexp = o.unexp;
    }

    constexpr result(result &&o)
    {
      has_val = o.has_val;

      if (has_val)
        val = move(o.val);
      else
        unexp = move(o.unexp);
    }

    constexpr result &operator=(
        const result &o)
    {
      if (this != &o)
      {
        has_val = o.has_val;

        if (has_val)
          val = o.val;
        else
          unexp = o.unexp;
      }

      return *this;
    }

    constexpr result &operator=(
        result &&o)
    {
      if (this != &o)
      {
        has_val = o.has_val;

        if (has_val)
          val = move(o.val);
        else
          unexp = move(o.unexp);
      }

      return *this;
    }

    constexpr result &operator=(
        const type_t &o)
    {
      val = o;
      has_val = true;
      return *this;
    }

    constexpr result &operator=(
        type_t &&o)
    {
      val = move(o);
      has_val = true;
      return *this;
    }

    constexpr result &operator=(
        const unexpected_t &o)
    {
      unexp = o;
      has_val = false;
      return *this;
    }

    constexpr result &operator=(
        unexpected_t &&o)
    {
      unexp = move(o);
      has_val = false;
      return *this;
    }

  public:
    constexpr const type_t &value() const
    {
      return val;
    }

    constexpr type_t &value()
    {
      return val;
    }

    constexpr type_t &operator*()
    {
      return value();
    }

    constexpr const type_t &operator*() const
    {
      return value();
    }

    constexpr const unexpected_t &error() const
    {
      return unexp;
    }

    constexpr unexpected_t &error()
    {
      return unexp;
    }

    constexpr operator bool() const
    {
      return has_val;
    }

    constexpr operator type_t &() &
    {
      return val;
    }


    constexpr operator const type_t &() const &
    {
      return val;
    }

    constexpr operator type_t &&() &&
    {
      return val;
    }

    constexpr operator const type_t &&() const &&
    {
      return val;
    }
  };

}
# 6 "utility.hpp" 2
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 1 3
# 36 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 1 3
# 39 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 3
       
# 40 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 3

# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 1 3
# 278 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 3

# 278 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 3
namespace std
{
  typedef long long unsigned int size_t;
  typedef long long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 300 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 586 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\os_defines.h" 1 3
# 587 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 2 3


# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\cpu_defines.h" 1 3
# 590 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 2 3
# 777 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\pstl\\pstl_config.h" 1 3
# 778 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\x86_64-w64-mingw32\\bits\\c++config.h" 2 3
# 42 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 2 3
# 75 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 1 3
# 9 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 1 3
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_mac.h" 1 3
# 98 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_mac.h" 3
             
# 107 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_mac.h" 3
             
# 11 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_secapi.h" 1 3
# 44 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 12 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 283 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\vadefs.h" 1 3
# 9 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\vadefs.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 617 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sdks/_mingw_ddk.h" 1 3
# 618 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\vadefs.h" 3
}



#pragma pack(pop)
# 284 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 569 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 3
extern "C" {
# 580 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw.h" 3
void __attribute__((__cdecl__)) __debugbreak(void);
extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) void __attribute__((__cdecl__)) __debugbreak(void)
{

  __asm__ __volatile__("int {$}3":);







}




const char *__mingw_get_crt_info (void);


}
# 11 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 40 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
__extension__ typedef unsigned long long size_t;
# 50 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
__extension__ typedef long long ssize_t;






typedef size_t rsize_t;
# 67 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
__extension__ typedef long long intptr_t;
# 80 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 93 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
__extension__ typedef long long ptrdiff_t;
# 111 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;
# 143 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
typedef __time64_t time_t;
# 435 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {





  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;

} threadlocinfo;
# 506 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt.h" 3
#pragma pack(pop)
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt_wstdlib.h" 1 3
# 12 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt_wstdlib.h" 3
extern "C" {


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itow_s (int _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _itow_s(int _Val, wchar_t (&_DstBuf)[__size], int _Radix) { return _itow_s(_Val, _DstBuf, __size, _Radix); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltow_s (long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ltow_s(long _Val, wchar_t (&_DstBuf)[__size], int _Radix) { return _ltow_s(_Val, _DstBuf, __size, _Radix); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultow_s (unsigned long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ultow_s(unsigned long _Val, wchar_t (&_DstBuf)[__size], int _Radix) { return _ultow_s(_Val, _DstBuf, __size, _Radix); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t *_ReturnSize,wchar_t *_DstBuf,size_t _DstSizeInWords,const wchar_t *_VarName);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wgetenv_s(size_t* _ReturnSize, wchar_t (&_DstBuf)[__size], const wchar_t* _VarName) { return _wgetenv_s(_ReturnSize, _DstBuf, __size, _VarName); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wdupenv_s(wchar_t **_Buffer,size_t *_BufferSizeInWords,const wchar_t *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64tow_s(long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64tow_s(unsigned long long _Val,wchar_t *_DstBuf,size_t _SizeInWords,int _Radix);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t *_PathResult,size_t _SizeInWords,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wmakepath_s(wchar_t (&_PathResult)[__size], const wchar_t* _Drive, const wchar_t* _Dir, const wchar_t* _Filename, const wchar_t* _Ext) { return _wmakepath_s(_PathResult,__size,_Drive,_Dir,_Filename,_Ext); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wputenv_s(const wchar_t *_Name,const wchar_t *_Value);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wsearchenv_s(const wchar_t* _Filename, const wchar_t* _EnvVar, wchar_t (&_ResultPath)[__size]) { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, __size); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_FullPath,wchar_t *_Drive,size_t _DriveSizeInWords,wchar_t *_Dir,size_t _DirSizeInWords,wchar_t *_Filename,size_t _FilenameSizeInWords,wchar_t *_Ext,size_t _ExtSizeInWords);
  extern "C++" { template <size_t __drive_size, size_t __dir_size, size_t __name_size, size_t __ext_size> inline errno_t __attribute__((__cdecl__)) _wsplitpath_s(const wchar_t *_Dest, wchar_t (&__drive)[__drive_size], wchar_t (&__dir)[__dir_size], wchar_t (&__name)[__name_size], wchar_t (&__ext)[__ext_size]) { return _wsplitpath_s(_Dest, __drive, __drive_size, __dir, __dir_size, __name, __name_size, __ext, __ext_size); } }


}
# 11 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\limits.h" 1 3 4
# 34 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\limits.h" 3 4
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\syslimits.h" 1 3 4






# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\limits.h" 1 3 4
# 203 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\limits.h" 3 4
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\limits.h" 1 3 4





# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\crtdefs.h" 1 3 4
# 7 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\limits.h" 2 3 4
# 204 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\limits.h" 2 3 4
# 8 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\syslimits.h" 2 3 4
# 35 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include-fixed\\limits.h" 2 3 4
# 12 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 26 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 50 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef int (__attribute__((__cdecl__)) *_onexit_t)(void);
# 60 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef struct _div_t {
    int quot;
    int rem;
  } div_t;

  typedef struct _ldiv_t {
    long quot;
    long rem;
  } ldiv_t;





#pragma pack(4)
  typedef struct {
    unsigned char ld[10];
  } _LDOUBLE;
#pragma pack()



  typedef struct {
    double x;
  } _CRT_DOUBLE;

  typedef struct {
    float f;
  } _CRT_FLOAT;

       


  typedef struct {
    long double x;
  } _LONGDOUBLE;

       

#pragma pack(4)
  typedef struct {
    unsigned char ld12[12];
  } _LDBL12;
#pragma pack()
# 116 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern int * __imp___mb_cur_max;




__attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) ___mb_cur_max_func(void);
# 143 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  typedef void (__attribute__((__cdecl__)) *_purecall_handler)(void);

  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _set_purecall_handler(_purecall_handler _Handler);
  __attribute__ ((__dllimport__)) _purecall_handler __attribute__((__cdecl__)) _get_purecall_handler(void);

  typedef void (__attribute__((__cdecl__)) *_invalid_parameter_handler)(const wchar_t *,const wchar_t *,const wchar_t *,unsigned int,uintptr_t);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _set_invalid_parameter_handler(_invalid_parameter_handler _Handler);
  __attribute__ ((__dllimport__)) _invalid_parameter_handler __attribute__((__cdecl__)) _get_invalid_parameter_handler(void);



  __attribute__ ((__dllimport__)) extern int *__attribute__((__cdecl__)) _errno(void);

  errno_t __attribute__((__cdecl__)) _set_errno(int _Value);
  errno_t __attribute__((__cdecl__)) _get_errno(int *_Value);

  __attribute__ ((__dllimport__)) unsigned long *__attribute__((__cdecl__)) __doserrno(void);

  errno_t __attribute__((__cdecl__)) _set_doserrno(unsigned long _Value);
  errno_t __attribute__((__cdecl__)) _get_doserrno(unsigned long *_Value);
# 173 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern __attribute__((dllimport)) char *_sys_errlist[1];
  extern __attribute__((dllimport)) int _sys_nerr;





  __attribute__ ((__dllimport__)) char ***__attribute__((__cdecl__)) __p___argv(void);
  __attribute__ ((__dllimport__)) int *__attribute__((__cdecl__)) __p__fmode(void);
# 191 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  errno_t __attribute__((__cdecl__)) _get_pgmptr(char **_Value);
  errno_t __attribute__((__cdecl__)) _get_wpgmptr(wchar_t **_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_fmode(int _Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_fmode(int *_PMode);
# 282 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern int * __imp___argc;



  extern char *** __imp___argv;



  extern wchar_t *** __imp___wargv;
# 322 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  extern char *** __imp__environ;




  extern wchar_t *** __imp__wenviron;






  extern char ** __imp__pgmptr;




  extern wchar_t ** __imp__wpgmptr;




  extern unsigned int * __imp__osplatform;




  extern unsigned int * __imp__osver;




  extern unsigned int * __imp__winver;




  extern unsigned int * __imp__winmajor;




  extern unsigned int * __imp__winminor;





  errno_t __attribute__((__cdecl__)) _get_osplatform(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_osver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winver(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winmajor(unsigned int *_Value);
  errno_t __attribute__((__cdecl__)) _get_winminor(unsigned int *_Value);




  extern "C++" {
    template <typename _CountofType,size_t _SizeOfArray> char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

  }





  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) exit(int _Code) __attribute__ ((__noreturn__));
  void __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) _exit(int _Code) __attribute__ ((__noreturn__));






  void __attribute__((__cdecl__)) _Exit(int) __attribute__ ((__noreturn__));

  inline __attribute__ ((__noreturn__)) void __attribute__((__cdecl__)) _Exit(int status)
  { _exit(status); }



       

  void __attribute__((__cdecl__)) __attribute__ ((__noreturn__)) abort(void);
       



  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_abort_behavior(unsigned int _Flags,unsigned int _Mask);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);


  __extension__ long long __attribute__((__cdecl__)) _abs64(long long);

  extern __inline__ __attribute__((__always_inline__,__gnu_inline__)) long long __attribute__((__cdecl__)) _abs64(long long x) {
    return __builtin_llabs(x);
  }


  int __attribute__((__cdecl__)) atexit(void (__attribute__((__cdecl__)) *)(void));





  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);

  int __attribute__((__cdecl__)) atoi(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoi_l(const char *_Str,_locale_t _Locale);
  long __attribute__((__cdecl__)) atol(const char *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _atol_l(const char *_Str,_locale_t _Locale);


  void *__attribute__((__cdecl__)) bsearch(const void *_Key,const void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));
  void __attribute__((__cdecl__)) qsort(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(const void *,const void *));

  unsigned short __attribute__((__cdecl__)) _byteswap_ushort(unsigned short _Short);
  unsigned long __attribute__((__cdecl__)) _byteswap_ulong (unsigned long _Long);
  __extension__ unsigned long long __attribute__((__cdecl__)) _byteswap_uint64(unsigned long long _Int64);
  div_t __attribute__((__cdecl__)) div(int _Numerator,int _Denominator);
  char *__attribute__((__cdecl__)) getenv(const char *_VarName) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _itoa(int _Value,char *_Dest,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _i64toa(long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ui64toa(unsigned long long _Val,char *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64(const char *_String);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _atoi64_l(const char *_String,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _strtoi64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64(const char *_String,char **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _strtoui64_l(const char *_String,char **_EndPtr,int _Radix,_locale_t _Locale);
  ldiv_t __attribute__((__cdecl__)) ldiv(long _Numerator,long _Denominator);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ltoa(long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) mblen(const char *_Ch,size_t _MaxCount);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mblen_l(const char *_Ch,size_t _MaxCount,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen(const char *_Str);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrlen_l(const char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen(const char *_Str,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstrnlen_l(const char *_Str,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mbtowc(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _mbtowc_l(wchar_t * __restrict__ _DstCh,const char * __restrict__ _SrcCh,size_t _SrcSizeInBytes,_locale_t _Locale);
  size_t __attribute__((__cdecl__)) mbstowcs(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _mbstowcs_l(wchar_t * __restrict__ _Dest,const char * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale);
  int __attribute__((__cdecl__)) mkstemp(char *template_name);
  int __attribute__((__cdecl__)) rand(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_error_mode(int _Mode);
  void __attribute__((__cdecl__)) srand(unsigned int _Seed);
# 483 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
inline __attribute__((__cdecl__))
double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtod(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  return __mingw_strtod( _Str, _EndPtr);
}

inline __attribute__((__cdecl__))
float __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtof(const char * __restrict__ _Str,char ** __restrict__ _EndPtr)
{
  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  return __mingw_strtof( _Str, _EndPtr);
}






  long double __attribute__((__cdecl__)) __attribute__ ((__nothrow__)) strtold(const char * __restrict__ , char ** __restrict__ );


  extern double __attribute__((__cdecl__)) __attribute__ ((__nothrow__))
  __strtod (const char * __restrict__ , char ** __restrict__);







  float __attribute__((__cdecl__)) __mingw_strtof (const char * __restrict__, char ** __restrict__);
  double __attribute__((__cdecl__)) __mingw_strtod (const char * __restrict__, char ** __restrict__);
  long double __attribute__((__cdecl__)) __mingw_strtold(const char * __restrict__, char ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _strtod_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) strtol(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _strtol_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) strtoul(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _strtoul_l(const char * __restrict__ _Str,char ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);


  int __attribute__((__cdecl__)) system(const char *_Command);

  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ultoa(unsigned long _Value,char *_Dest,int _Radix) ;
  int __attribute__((__cdecl__)) wctomb(char *_MbCh,wchar_t _WCh) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wctomb_l(char *_MbCh,wchar_t _WCh,_locale_t _Locale) ;
  size_t __attribute__((__cdecl__)) wcstombs(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount) ;
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _wcstombs_l(char * __restrict__ _Dest,const wchar_t * __restrict__ _Source,size_t _MaxCount,_locale_t _Locale) ;



  void *__attribute__((__cdecl__)) calloc(size_t _NumOfElements,size_t _SizeOfElements);
  void __attribute__((__cdecl__)) free(void *_Memory);
  void *__attribute__((__cdecl__)) malloc(size_t _Size);
  void *__attribute__((__cdecl__)) realloc(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _recalloc(void *_Memory,size_t _Count,size_t _Size);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _aligned_free(void *_Memory);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_malloc(size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_malloc(size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_realloc(void *_Memory,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_realloc(void *_Memory,size_t _Size,size_t _Alignment,size_t _Offset);
  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _aligned_offset_recalloc(void *_Memory,size_t _Count,size_t _Size,size_t _Alignment,size_t _Offset);





  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _itow(int _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ltow(long _Value,wchar_t *_Dest,int _Radix) ;
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ultow(unsigned long _Value,wchar_t *_Dest,int _Radix) ;

  double __attribute__((__cdecl__)) __mingw_wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr);
  float __attribute__((__cdecl__)) __mingw_wcstof(const wchar_t * __restrict__ nptr, wchar_t ** __restrict__ endptr);
  long double __attribute__((__cdecl__)) __mingw_wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);


  inline __attribute__((__cdecl__))
  double __attribute__((__cdecl__)) wcstod(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstod(_Str,_EndPtr);
  }
  inline __attribute__((__cdecl__))
  float __attribute__((__cdecl__)) wcstof(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr){
    return __mingw_wcstof(_Str,_EndPtr);
  }






  long double __attribute__((__cdecl__)) wcstold(const wchar_t * __restrict__, wchar_t ** __restrict__);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wcstod_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,_locale_t _Locale);
  long __attribute__((__cdecl__)) wcstol(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wcstol_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  unsigned long __attribute__((__cdecl__)) wcstoul(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix);
  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _wcstoul_l(const wchar_t * __restrict__ _Str,wchar_t ** __restrict__ _EndPtr,int _Radix,_locale_t _Locale);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wgetenv(const wchar_t *_VarName) ;


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wsystem(const wchar_t *_Command);

  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _wtof_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wtoi_l(const wchar_t *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol(const wchar_t *_Str);
  __attribute__ ((__dllimport__)) long __attribute__((__cdecl__)) _wtol_l(const wchar_t *_Str,_locale_t _Locale);

  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _i64tow(long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _ui64tow(unsigned long long _Val,wchar_t *_DstBuf,int _Radix) ;
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64(const wchar_t *_Str);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wtoi64_l(const wchar_t *_Str,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _wcstoi64_l(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64(const wchar_t *_Str,wchar_t **_EndPtr,int _Radix);
  __extension__ __attribute__ ((__dllimport__)) unsigned long long __attribute__((__cdecl__)) _wcstoui64_l(const wchar_t *_Str ,wchar_t **_EndPtr,int _Radix,_locale_t _Locale);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putenv(const char *_EnvString);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wputenv(const wchar_t *_EnvString);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fullpath(char *_FullPath,const char *_Path,size_t _SizeInBytes);
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl(_CRT_DOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl(_LDOUBLE *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt(_CRT_FLOAT *_Result,char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atodbl_l(_CRT_DOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoldbl_l(_LDOUBLE *_Result,char *_Str,_locale_t _Locale);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _atoflt_l(_CRT_FLOAT *_Result,char *_Str,_locale_t _Locale);
# 634 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
unsigned long __attribute__((__cdecl__)) _lrotl(unsigned long,int);
unsigned long __attribute__((__cdecl__)) _lrotr(unsigned long,int);





  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _makepath(char *_Path,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  _onexit_t __attribute__((__cdecl__)) _onexit(_onexit_t _Func);



  void __attribute__((__cdecl__)) perror(const char *_ErrMsg);

       
       


  __extension__ unsigned long long __attribute__((__cdecl__)) _rotl64(unsigned long long _Val,int _Shift);
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long Value,int Shift);
       
       
       
       


  unsigned int __attribute__((__cdecl__)) _rotr(unsigned int _Val,int _Shift);
  unsigned int __attribute__((__cdecl__)) _rotl(unsigned int _Val,int _Shift);
       
       
  __extension__ unsigned long long __attribute__((__cdecl__)) _rotr64(unsigned long long _Val,int _Shift);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _searchenv(const char *_Filename,const char *_EnvVar,char *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _splitpath(const char *_FullPath,char *_Drive,char *_Dir,char *_Filename,char *_Ext) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _swab(char *_Buf1,char *_Buf2,int _SizeInBytes);



  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wfullpath(wchar_t *_FullPath,const wchar_t *_Path,size_t _SizeInWords);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wmakepath(wchar_t *_ResultPath,const wchar_t *_Drive,const wchar_t *_Dir,const wchar_t *_Filename,const wchar_t *_Ext);


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsearchenv(const wchar_t *_Filename,const wchar_t *_EnvVar,wchar_t *_ResultPath) ;
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _wsplitpath(const wchar_t *_FullPath,wchar_t *_Drive,wchar_t *_Dir,wchar_t *_Filename,wchar_t *_Ext) ;


  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _beep(unsigned _Frequency,unsigned _Duration) __attribute__ ((__deprecated__));

  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _seterrormode(int _Mode) __attribute__ ((__deprecated__));
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _sleep(unsigned long _Duration) __attribute__ ((__deprecated__));
# 705 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
  char *__attribute__((__cdecl__)) ecvt(double _Val,int _NumOfDigits,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) fcvt(double _Val,int _NumOfDec,int *_PtDec,int *_PtSign) ;
  char *__attribute__((__cdecl__)) gcvt(double _Val,int _NumOfDigits,char *_DstBuf) ;
  char *__attribute__((__cdecl__)) itoa(int _Val,char *_DstBuf,int _Radix) ;
  char *__attribute__((__cdecl__)) ltoa(long _Val,char *_DstBuf,int _Radix) ;
  int __attribute__((__cdecl__)) putenv(const char *_EnvString) ;



  void __attribute__((__cdecl__)) swab(char *_Buf1,char *_Buf2,int _SizeInBytes) ;


  char *__attribute__((__cdecl__)) ultoa(unsigned long _Val,char *_Dstbuf,int _Radix) ;
  _onexit_t __attribute__((__cdecl__)) onexit(_onexit_t _Func);





  typedef struct { __extension__ long long quot, rem; } lldiv_t;

  __extension__ lldiv_t __attribute__((__cdecl__)) lldiv(long long, long long);

  __extension__ long long __attribute__((__cdecl__)) llabs(long long);

  __extension__ inline long long __attribute__((__cdecl__)) llabs(long long _j) { return (_j >= 0 ? _j : -_j); }


  __extension__ long long __attribute__((__cdecl__)) strtoll(const char * __restrict__, char ** __restrict, int);
  __extension__ unsigned long long __attribute__((__cdecl__)) strtoull(const char * __restrict__, char ** __restrict__, int);


  __extension__ long long __attribute__((__cdecl__)) atoll (const char *);
# 760 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 3
}


#pragma pack(pop)

# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdlib_s.h" 1 3
# 9 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdlib_s.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 1 3
# 30 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 1 3
# 31 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 2 3
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdlib_s.h" 2 3


extern "C" {


  __attribute__ ((__dllimport__)) void * __attribute__((__cdecl__)) bsearch_s(const void *_Key,const void *_Base,rsize_t _NumOfElements,rsize_t _SizeOfElements,int (__attribute__((__cdecl__)) * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _dupenv_s(char **_PBuffer,size_t *_PBufferSizeInBytes,const char *_VarName);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) getenv_s(size_t *_ReturnSize,char *_DstBuf,rsize_t _DstSize,const char *_VarName);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) getenv_s(size_t * _ReturnSize, char (&_Dest)[__size], const char * _VarName) { return getenv_s(_ReturnSize, _Dest, __size, _VarName); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _itoa_s(int _Value,char *_DstBuf,size_t _Size,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _itoa_s(int _Value, char (&_Dest)[__size], int _Radix) { return _itoa_s(_Value, _Dest, __size, _Radix); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _i64toa_s(long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ui64toa_s(unsigned long long _Val,char *_DstBuf,size_t _Size,int _Radix);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ltoa_s(long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ltoa_s(long _Value, char (&_Dest)[__size], int _Radix) { return _ltoa_s(_Value, _Dest, __size, _Radix); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) mbstowcs_s(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[__size], const char * _Source, size_t _MaxCount) { return mbstowcs_s(_PtNumOfCharConverted, _Dest, __size, _Source, _MaxCount); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t *_PtNumOfCharConverted,wchar_t *_DstBuf,size_t _SizeInWords,const char *_SrcBuf,size_t _MaxCount,_locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _mbstowcs_s_l(size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[__size], const char * _Source, size_t _MaxCount, _locale_t _Locale) { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, __size, _Source, _MaxCount, _Locale); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Val,char *_DstBuf,size_t _Size,int _Radix);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _ultoa_s(unsigned long _Value, char (&_Dest)[__size], int _Radix) { return _ultoa_s(_Value, _Dest, __size, _Radix); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wctomb_s(int *_SizeConverted,char *_MbCh,rsize_t _SizeInBytes,wchar_t _WCh);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wctomb_s_l(int *_SizeConverted,char *_MbCh,size_t _SizeInBytes,wchar_t _WCh,_locale_t _Locale);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) wcstombs_s(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) wcstombs_s(size_t* _PtNumOfCharConverted, char (&_Dst)[__size], const wchar_t* _Src, size_t _MaxCountInBytes) { return wcstombs_s(_PtNumOfCharConverted, _Dst, __size, _Src, _MaxCountInBytes); } }
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t *_PtNumOfCharConverted,char *_Dst,size_t _DstSizeInBytes,const wchar_t *_Src,size_t _MaxCountInBytes,_locale_t _Locale);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wcstombs_s_l(size_t* _PtNumOfCharConverted, char (&_Dst)[__size], const wchar_t* _Src, size_t _MaxCountInBytes, _locale_t _Locale) { return _wcstombs_s_l(_PtNumOfCharConverted, _Dst, __size, _Src, _MaxCountInBytes, _Locale); } }


  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _ecvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDights,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _fcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDec,int *_PtDec,int *_PtSign);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _gcvt_s(char *_DstBuf,size_t _Size,double _Val,int _NumOfDigits);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _makepath_s(char *_PathResult,size_t _Size,const char *_Drive,const char *_Dir,const char *_Filename,const char *_Ext);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _putenv_s(const char *_Name,const char *_Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _searchenv_s(const char *_Filename,const char *_EnvVar,char *_ResultPath,size_t _SizeInBytes);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_FullPath,char *_Drive,size_t _DriveSize,char *_Dir,size_t _DirSize,char *_Filename,size_t _FilenameSize,char *_Ext,size_t _ExtSize);
  extern "C++" { template <size_t __drive_size, size_t __dir_size, size_t __name_size, size_t __ext_size> inline errno_t __attribute__((__cdecl__)) _splitpath_s(const char *_Dest, char (&__drive)[__drive_size], char (&__dir)[__dir_size], char (&__name)[__name_size], char (&__ext)[__ext_size]) { return _splitpath_s(_Dest, __drive, __drive_size, __dir, __dir_size, __name, __name_size, __ext, __ext_size); } }



  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) qsort_s(void *_Base,size_t _NumOfElements,size_t _SizeOfElements,int (__attribute__((__cdecl__)) *_PtFuncCompare)(void *,const void *,const void *),void *_Context);





}
# 766 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 1 3
# 11 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 3
#pragma pack(push,_CRT_PACKING)


extern "C" {
# 46 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 3
  typedef struct _heapinfo {
    int *_pentry;
    size_t _size;
    int _useflag;
  } _HEAPINFO;


  extern unsigned int _amblksiz;
# 74 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 3
void * __mingw_aligned_malloc (size_t _Size, size_t _Alignment);
void __mingw_aligned_free (void *_Memory);
void * __mingw_aligned_offset_realloc (void *_Memory, size_t _Size, size_t _Alignment, size_t _Offset);
void * __mingw_aligned_realloc (void *_Memory, size_t _Size, size_t _Offset);


# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include\\mm_malloc.h" 1 3 4
# 27 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include\\mm_malloc.h" 3 4
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 1 3 4
# 28 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include\\mm_malloc.h" 2 3 4

# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\errno.h" 1 3 4
# 12 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\errno.h" 3 4
extern "C" {
# 239 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\errno.h" 3 4
}
# 30 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\lib\\gcc\\x86_64-w64-mingw32\\11.2.0\\include\\mm_malloc.h" 2 3 4


static __inline__ void *
_mm_malloc (size_t __size, size_t __align)
{
  void * __malloc_ptr;
  void * __aligned_ptr;


  if (__align & (__align - 1))
    {

      (*_errno()) = 22;

      return ((void *) 0);
    }

  if (__size == 0)
    return ((void *) 0);





    if (__align < 2 * sizeof (void *))
      __align = 2 * sizeof (void *);

  __malloc_ptr = malloc (__size + __align);
  if (!__malloc_ptr)
    return ((void *) 0);


  __aligned_ptr = (void *) (((size_t) __malloc_ptr + __align)
       & ~((size_t) (__align) - 1));


  ((void **) __aligned_ptr)[-1] = __malloc_ptr;

  return __aligned_ptr;
}

static __inline__ void
_mm_free (void *__aligned_ptr)
{
  if (__aligned_ptr)
    free (((void **) __aligned_ptr)[-1]);
}
# 81 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 2 3




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _resetstkoflw (void);

  __attribute__ ((__dllimport__)) unsigned long __attribute__((__cdecl__)) _set_malloc_crt_max_wait(unsigned long _NewValue);

  __attribute__ ((__dllimport__)) void *__attribute__((__cdecl__)) _expand(void *_Memory,size_t _NewSize);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _msize(void *_Memory);






  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _get_sbh_threshold(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_sbh_threshold(size_t _NewValue);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _set_amblksiz(size_t _Value);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _get_amblksiz(size_t *_Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapadd(void *_Memory,size_t _Size);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapchk(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapmin(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapset(unsigned int _Fill);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _heapwalk(_HEAPINFO *_EntryInfo);
  __attribute__ ((__dllimport__)) size_t __attribute__((__cdecl__)) _heapused(size_t *_Used,size_t *_Commit);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _get_heap_handle(void);
# 120 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 3
  static __inline void *_MarkAllocaS(void *_Ptr,unsigned int _Marker) {
    if(_Ptr) {
      *((unsigned int*)_Ptr) = _Marker;
      _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
  }
# 139 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 3
  static __inline void __attribute__((__cdecl__)) _freea(void *_Memory) {
    unsigned int _Marker;
    if(_Memory) {
      _Memory = (char*)_Memory - 16;
      _Marker = *(unsigned int *)_Memory;
      if(_Marker==0xDDDD) {
 free(_Memory);
      }





    }
  }
# 182 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\malloc.h" 3
}


#pragma pack(pop)
# 767 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdlib.h" 2 3
# 76 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 2 3

# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\bits\\std_abs.h" 1 3
# 33 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\bits\\std_abs.h" 3
       
# 34 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\bits\\std_abs.h" 3
# 46 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\bits\\std_abs.h" 3
extern "C++"
{
namespace std
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\bits\\std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 107 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\bits\\std_abs.h" 3

}
}
# 78 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 2 3
# 121 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 3
extern "C++"
{
namespace std
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 3
namespace __gnu_cxx
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 7 "utility.hpp" 2




# 10 "utility.hpp"
namespace lib
{
  using size_t = long unsigned;
  using byte_t = char unsigned;

  template <typename type_t>
  using ptr = type_t *;

  template <typename type_t>
  using cptr = type_t *const;

  template <typename type_t>
  constexpr remove_reference<type_t> &&
  move(type_t &&t)
  {
    return static_cast<remove_reference<type_t> &&>(t);
  }


  template <typename type_t,
            typename type_t2>
  constexpr void move(
    type_t &dest,
    type_t2 &&src)
  {
    dest = move(src);
  }

  template <typename type_t,
            typename type_t2,
            typename type_t3>
  constexpr void move(
    type_t &dest,
    type_t2 &&src,
    type_t3 &&null)
  {
    dest = move(src);
    src = move(null);
  }

  template <typename type_t, typename type_t2>
  constexpr void copy(
    type_t &dest,
    type_t2 &&src)
  {
    dest = src;
  }

  template <typename type_t>
  const type_t &const_me(type_t &t)
  {
    return t;
  }

  template <typename type_t>
  type_t &unconst_me(const type_t &t)
  {
    return const_cast<type_t &>(t);
  }

  template <typename type_t>
  constexpr void memcpy(
      const type_t *bsrc,
      const type_t *esrc,
      type_t *dest)
  {
    constexpr size_t cpualign = sizeof(size_t);
    constexpr size_t typealign = sizeof(type_t);

    const size_t allbytes = (esrc - bsrc) * typealign;
    size_t alignedbytes = allbytes / cpualign;

    const size_t *bsrcs = reinterpret_cast<const size_t *>(bsrc);
    size_t *dests = reinterpret_cast<size_t *>(dest);

    while (alignedbytes--)
      *dests++ = *bsrcs++;

    const byte_t *bsrcb = reinterpret_cast<const byte_t *>(bsrcs);
    byte_t *destb = reinterpret_cast<byte_t *>(dests);
    size_t tailbytes = allbytes % cpualign;

    while (tailbytes--)
      *destb++ = *bsrcb++;
  }

  template <
      size_t i,
      typename arg_t,
      typename... args_t>
  constexpr auto &get(
      const arg_t &arg,
      const args_t &...args)
  {
    static_assert(i <= sizeof...(args));

    if constexpr (i == 0)
      return arg;
    else
      return get<i - 1>(args...);
  }

  struct alloc_error
  {
  };

  template <
      typename type_t,
      typename... args_t>
  ptr<type_t>
  malloc(
      args_t &&...args) noexcept
  {
    ptr<type_t> p = std::malloc(sizeof(type_t));

    *p = type_t(args...);

    return p;
  }

  template <typename type_t, typename... args_t>
  ptr<type_t>
  mallocs(size_t nb, args_t &&...args) noexcept
  {

    ptr<type_t> p = static_cast<ptr<type_t>>(std::malloc(nb * sizeof(type_t)));
    auto init = p;
    auto pend = p + nb;

    while (p != pend)
      *(p++) = type_t(args...);

    return init;
  }

  template <typename type_t>
  void free(ptr<type_t> p) noexcept
  {
    if (not p)
      return;

    p->~type_t();
    std::free(p);
  }

  template <typename type_t>
  void frees(ptr<type_t> p, size_t nb) noexcept
  {
    if (p == nullptr)
      return;

    auto pend = p + nb;
    auto init = p;

    while (p != pend)
      (*(p++)).~type_t();

    std::free(init);
  }

}
# 5 "vector.hpp" 2
# 1 "algorithm.hpp" 1





namespace lib
{
  template <typename iterator>
  constexpr iterator find_if(
      iterator b,
      iterator e,
      auto &&pred)
  {
    for (; b != e and not pred(*b); ++b)
      ;

    return b;
  }

  template <
      typename iterator,
      typename type_t>
  constexpr iterator find(
      iterator b,
      iterator e,
      type_t &&t)
  {
    return find_if(
        b, e,
        [&t](const auto &o)
        { return o == t; });
  }

  template <typename iterator>
  constexpr iterator find_if_not(
      iterator b,
      iterator e,
      auto &&pred)
  {
    return find_if(
        b, e,
        [&pred](const auto &item)
        { return not pred(item); });
  }

  template <
      typename iterator>
  constexpr iterator
  find_nth_if(
      unsigned nth,
      iterator b,
      iterator e,
      auto &&pred)
  {
    for (; b != e and nth > 0; --nth)
      b = lib::find_if(b, e, pred);

    return b;
  }

  template <typename iterator>
  void reverse(
      iterator b,
      iterator e)
  {
    for (; (b != e) and (b != --e); b++)
    {
      auto tmp = lib::move(*b);
      *b = lib::move(*e);
      *e = lib::move(tmp);
    }
  }

  template <typename iterator>
  void for_each(
      iterator b,
        iterator e,
      auto &&act)
  {
    for (; b != e; ++b)
      act(*b);
  }

  template <
      typename iterator1,
      typename iterator2>
  constexpr void copy_all(
      iterator1 b,
      iterator1 e,
      iterator2 bc)
  {
    for (; b != e; ++b, ++bc)
      *bc = *b;
  }

  template <
      typename iterator1,
      typename iterator2>
  constexpr void move_all(
      iterator1 b,
      iterator1 e,
      iterator2 bc)
  {
    for (; b != e; ++b, ++bc)
      *bc = move(*b);
  }

  template <typename iterator>
  constexpr unsigned count_if(
      iterator b,
      iterator e,
      auto &&pred)
  {
    unsigned cnt = 0;
    for (; b != e; ++b)
      if (pred(*b))
        ++cnt;
    return cnt;
  }

  template <
      typename iterator,
      typename type_t>
  constexpr unsigned count(
      iterator b,
      iterator e,
      type_t &&o)
  {
    return count_if(
        b, e,
        [&o](const type_t &t)
        { return t == o; });
  }

  template <typename iterator>
  constexpr bool all_of(
      iterator b,
      iterator e,
      auto &&pred)
  {
    return find_if_not(b, e, pred) == e;
  }

  template <typename iterator>
  constexpr bool none_of(
      iterator b,
      iterator e,
      auto &&pred)
  {
    return find_if(b, e, pred) == e;
  }

  template <typename iterator>
  constexpr bool any_of(
      iterator b,
      iterator e,
      auto &&pred)
  {
    return find_if(b, e, pred) != e;
  }

  template <
      typename iterator,
      typename value>
  constexpr void replace_if(
      iterator b,
      iterator e,
      auto &&pred,
      const value &v)
  {
    for (; b != e; ++b)
      if (pred(v))
        *b = v;
  }

  template <
      typename iterator1,
      typename iterator2>
  constexpr bool starts_with(
      iterator1 b,
      iterator1 e,
      iterator2 bo,
      iterator2 eo)
  {
    if (e - b < eo - bo)
      return false;

    for (; bo != eo and *b == *bo; (++b, ++bo))
      ;

    return bo == eo;
  }

  template <
      typename iterator1,
      typename iterator2>
  constexpr bool equals(
      iterator1 b,
      iterator1 e,
      iterator2 b2,
      iterator2 e2)
  {
    return e - b == e2 - b2 and
           starts_with(b, e, b2, e2);
  }

}
# 6 "vector.hpp" 2

namespace lib
{
  template <typename T>
  class vector
  {
    size_t lgth = 0;
    size_t max = 0;
    T *data = nullptr;

  public:
    explicit vector(size_t _max = 10)
        : max(_max),
          data(new T[_max])
    {
    }

    template <typename iterator>
    explicit vector(iterator b, iterator e)
        : vector(e - b)
    {
      for (; b != e; b++)
        push_back(*b);
    }

    vector(const vector<T> &v)
        : vector(v.max)
    {
      for (const T &it : v)
        push_back(it);
    }

    vector(vector<T> &&v)
        :
          lgth(v.lgth),
          max(v.max),
          data(v.data)
    {
      v.max = 0;
      v.lgth = 0;
      v.data = nullptr;
    }

    ~vector()
    {
      delete[] data;
      data = nullptr;
      max = 0;
      lgth = 0;
    }

    vector<T> &operator=(const vector<T> &v)
    {
      if (this != &v)
      {
        delete[] data;
        data = new T[v.max];
        copy_all(v.begin(), v.end(), begin());
        lgth = v.lgth;
      }

      return *this;
    }

    vector<T> &operator=(vector<T> &&v) = default;

    size_t size() const
    {
      return lgth;
    }

    bool empty() const
    {
      return lgth == 0;
    }

    size_t capacity() const
    {
      return max;
    }

    T &operator[](size_t i)
    {
      return data[i];
    }

    const T &operator[](size_t i) const
    {
      return data[i];
    }

    void push_back(const T &t)
    {
      if (lgth == max)
      {
        size_t nmax = max * 2;
        T *tmp = data;
        data = new T[nmax];

        for (size_t i = 0; i < max; ++i)
          data[i] = move(tmp[i]);

        max = nmax;
      }

      data[lgth] = t;
      ++lgth;
    }

    void push_back(T &&t)
    {
      if (lgth == max)
      {
        size_t nmax = max * 2;
        T *tmp = data;
        data = new T[nmax];

        for (size_t i = 0; i < max; ++i)
          data[i] = move(tmp[i]);

        max = nmax;
      }

      data[lgth] = move(t);
      ++lgth;
    }

    T *begin()
    {
      return data;
    }

    T *end()
    {
      return data + lgth;
    }

    const T *begin() const
    {
      return data;
    }

    const T *end() const
    {
      return data + lgth;
    }

    size_t front_index() const
    {
      return 0;
    }

    size_t back_index() const
    {
      return lgth;
    }

    const T &front() const
    {
      return *begin();
    }

    const T &back() const
    {
      return *end();
    }

    T &front()
    {
      return *begin();
    }

    T &back()
    {
      return *end();
    }
  };

}
# 5 "string.hpp" 2
# 1 "string_view.hpp" 1



# 1 "span.hpp" 1







namespace lib
{
  struct normal_limit
  {
    constexpr size_t
    operator()(
        size_t n)
    {
      return n;
    }
  };

  template <
      typename type_t,
      typename end_limit = normal_limit>
  class span
  {

    type_t *b = nullptr;
    type_t *e = nullptr;

  public:
    constexpr span() noexcept = default;

    constexpr span(
        const span &s) noexcept = default;

    span &operator=(
        const span &s) noexcept = default;

    ~span() = default;

    constexpr explicit span(
        type_t *_begin,
        type_t *_end)
        : b(_begin),
          e(_end) {}

    constexpr explicit span(
        type_t *_begin,
        size_t _length)
        : span(_begin,
               _begin + _length) {}

    template <size_t n>
    constexpr span(
        const type_t (&_begin)[n])
        : span(_begin, end_limit{}(n)) {}

  public:
    constexpr type_t *
    begin()
    {
      return b;
    }

    constexpr type_t *
    end()
    {
      return e;
    }

    constexpr const type_t *
    begin() const
    {
      return b;
    }

    constexpr const type_t *
    end() const
    {
      return e;
    }

    constexpr const type_t *
    data() const
    {
      return b;
    }

    constexpr const type_t &
    operator[](
        size_t i) const
    {
      return *(b + i);
    }

    constexpr type_t &
    operator[](
        size_t i)
    {
      return *(b + i);
    }

    constexpr size_t
    size() const
    {
      return e - b;
    }

    constexpr bool
    empty() const
    {
      return size() == 0;
    }
  };

  template <
      typename type_t1, typename lim1,
      typename type_t2, typename lim2>
  inline bool equals(
      const span<type_t1, lim1> s1,
      const span<type_t2, lim2> s2)
  {
    return lib::equals(
        s1.begin(), s1.end(),
        s2.begin(), s2.end());
  }
}
# 5 "string_view.hpp" 2


namespace lib
{
    struct cstring_limit
    {
      constexpr size_t operator()(size_t n)
      {
        return n - 1;
      }
    };

  template <character char_t>
  using basic_string_view = span<const char_t, cstring_limit>;

  using string_view = basic_string_view<char>;
  using wstring_view = basic_string_view<wchar_t>;
}
# 6 "string.hpp" 2


namespace lib
{
  template <character char_t>
  class basic_string
  {
    vector<char_t> data;

  public:
    basic_string() = default;
    explicit basic_string(size_t n) : data(n) {}
    basic_string(const basic_string &) = default;
    basic_string(basic_string &&) = default;
    ~basic_string() = default;

    template <size_t n>
    basic_string(
        const char_t (&s)[n])
        : data(n - 1)
    {
      for (auto &&c : s)
        if (c != '\0')
          push_back(c);
    }

    template <typename iterator_t>
    basic_string(
        iterator_t b,
        iterator_t e)
        : basic_string(e - b)
    {
      for (; b != e; ++b)
        push_back(*b);
    }

    basic_string &operator=(
        const basic_string &) = default;

    basic_string &operator=(
        basic_string &&) = default;

  public:
    bool operator==(
        basic_string_view<char_t> s) const
    {
      return lib::equals(begin(), end(), s.begin(), s.end());
    }

    basic_string_view<char_t> view() const
    {
      return basic_string_view<char_t>(begin(), end());
    }

    operator basic_string_view<char_t>() const
    {
      return view();
    }


  public:
    const size_t
    size() const
    {
      return data.size();
    }

    char_t &operator[](
        size_t i)
    {
      return data[i];
    }

    const char_t &operator[](
        size_t i) const
    {
      return data[i];
    }

    void push_back(
        char_t c)
    {
      data.push_back(c);
    }

    char_t *begin()
    {
      return data.begin();
    }

    char_t *end()
    {
      return data.end();
    }

    const char_t *begin() const
    {
      return data.begin();
    }

    const char_t *end() const
    {
      return data.end();
    }
  };

  using string = basic_string<char>;
  using wstring = basic_string<wchar_t>;
}
# 5 "format.hpp" 2



# 1 "file.hpp" 1



# 1 "exception.hpp" 1
# 5 "file.hpp" 2

# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 1 3
# 39 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 3
       
# 40 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 3


# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 1 3
# 9 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\corecrt_stdio_config.h" 1 3
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 2 3

#pragma pack(push,_CRT_PACKING)

       

       

       

       




# 23 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
extern "C" {
# 33 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  struct _iobuf {



    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;

  };
  typedef struct _iobuf FILE;
# 91 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_off_t.h" 1 3




  typedef long _off_t;

  typedef long off32_t;





  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;
# 26 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\_mingw_off_t.h" 3
typedef off32_t off_t;
# 92 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 2 3

__attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __acrt_iob_func(unsigned index);


  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) __iob_func(void);
# 115 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __extension__ typedef long long fpos_t;
# 156 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vscanf(const char * __restrict__ Format, va_list argp);
extern
  __attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);

extern
  __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
                               va_list _ArgList);
extern
  __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
extern
  __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_asprintf(char ** __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__((nonnull (1,2)))
  int __attribute__((__cdecl__)) __mingw_vasprintf(char ** __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));

extern
  __attribute__((__format__ (ms_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (ms_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_scanf(const char * __restrict__ _Format,...);
extern
  __attribute__((__format__ (ms_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);

extern
  __attribute__((__format__ (ms_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
extern
  __attribute__((__format__ (ms_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
# 285 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
extern "C++" {


inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sscanf(const char *__source, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int scanf(const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( (__acrt_iob_func(0)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fscanf(FILE *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"


inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsscanf (const char *__source, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsscanf( __source, __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vscanf(const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( (__acrt_iob_func(0)), __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_scanf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfscanf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfscanf( __stream, __format, __local_argv );
}


#pragma GCC diagnostic pop





inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int fprintf (FILE *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
int printf (const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( (__acrt_iob_func(1)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}
# 394 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
int sprintf (char *__stream, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
int vprintf (const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( (__acrt_iob_func(1)), __format, __local_argv );
}

inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)
{
# 433 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  return __mingw_vsprintf( __stream, __format, __local_argv );
}
# 449 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
int snprintf (char *__stream, size_t __n, const char *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



inline __attribute__((__cdecl__))
__attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
int vsnprintf (char *__stream, size_t __n, const char *__format, __builtin_va_list __local_argv)
{



  return __mingw_vsnprintf( __stream, __n, __format, __local_argv );
}
# 479 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
}
# 603 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void __attribute__((__cdecl__)) clearerr(FILE *_File);
  int __attribute__((__cdecl__)) fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _fdopen(int _FileHandle,const char *_Mode);

  int __attribute__((__cdecl__)) feof(FILE *_File);
  int __attribute__((__cdecl__)) ferror(FILE *_File);
  int __attribute__((__cdecl__)) fflush(FILE *_File);
  int __attribute__((__cdecl__)) fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fgetchar(void);
  int __attribute__((__cdecl__)) fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  int __attribute__((__cdecl__)) fgetpos64(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char *__attribute__((__cdecl__)) fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char *__attribute__((__cdecl__)) _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _flushall(void);
  FILE *__attribute__((__cdecl__)) fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int __attribute__((__cdecl__)) fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fputchar(int _Ch);
  int __attribute__((__cdecl__)) fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t __attribute__((__cdecl__)) fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE *__attribute__((__cdecl__)) freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int __attribute__((__cdecl__)) fsetpos(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fsetpos64(FILE *_File,const fpos_t *_Pos);
  int __attribute__((__cdecl__)) fseek(FILE *_File,long _Offset,int _Origin);
  long __attribute__((__cdecl__)) ftell(FILE *_File);



  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long long __attribute__((__cdecl__)) _ftelli64(FILE *_File);
# 662 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  int fseeko64(FILE* stream, _off64_t offset, int whence);
  int fseeko(FILE* stream, _off_t offset, int whence);

  _off_t ftello(FILE * stream);
  _off64_t ftello64(FILE * stream);
# 683 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  size_t __attribute__((__cdecl__)) fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) getc(FILE *_File);
  int __attribute__((__cdecl__)) getchar(void);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _getmaxstdio(void);
  char *__attribute__((__cdecl__)) gets(char *_Buffer) ;
  int __attribute__((__cdecl__)) _getw(FILE *_File);





  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _popen(const char *_Command,const char *_Mode);





  int __attribute__((__cdecl__)) putc(int _Ch,FILE *_File);
  int __attribute__((__cdecl__)) putchar(int _Ch);
  int __attribute__((__cdecl__)) puts(const char *_Str);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putw(int _Word,FILE *_File);


  int __attribute__((__cdecl__)) remove(const char *_Filename);
  int __attribute__((__cdecl__)) rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _unlink(const char *_Filename);

  int __attribute__((__cdecl__)) unlink(const char *_Filename) ;


  void __attribute__((__cdecl__)) rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _rmtmp(void);
  void __attribute__((__cdecl__)) setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int __attribute__((__cdecl__)) _get_output_format(void);
  int __attribute__((__cdecl__)) setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
# 743 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf(const char * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;

  FILE *__attribute__((__cdecl__)) tmpfile(void) ;
  char *__attribute__((__cdecl__)) tmpnam(char *_Buffer);
  int __attribute__((__cdecl__)) ungetc(int _Ch,FILE *_File);
# 765 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__((__format__ (ms_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__((__format__ (ms_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
# 924 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf(const char * __restrict__ _Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _get_printf_count_output(void);




                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswscanf (const wchar_t * __restrict__ _Str,const wchar_t * __restrict__ Format,va_list argp);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wscanf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwscanf(const wchar_t * __restrict__ Format, va_list argp);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwscanf (FILE * __restrict__ fp, const wchar_t * __restrict__ Format,va_list argp);

                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                      __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_wprintf(const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __mingw_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
                                                      __attribute__ ((__nonnull__ (3)))
  int __attribute__((__cdecl__)) __mingw_vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                      __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __mingw_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);

                                                    __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...);
                                                    __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_wscanf(const wchar_t * __restrict__ _Format,...);
                                                    __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);

                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
                                                     __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_wprintf(const wchar_t * __restrict__ _Format,...);
                                                    __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                    __attribute__ ((__nonnull__ (1)))
  int __attribute__((__cdecl__)) __ms_vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...);
                                                     __attribute__ ((__nonnull__ (2)))
  int __attribute__((__cdecl__)) __ms_vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list);
# 994 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int swscanf(const wchar_t *__source, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vswscanf( __source, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int wscanf(const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( (__acrt_iob_func(0)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int fwscanf(FILE *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwscanf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}


inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vswscanf (const wchar_t * __restrict__ __source, const wchar_t * __restrict__ __format, __builtin_va_list __local_argv)
{
  return __mingw_vswscanf( __source, __format, __local_argv );
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (1)))
int vwscanf(const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( (__acrt_iob_func(0)), __format, __local_argv );
}

inline __attribute__((__cdecl__))
                                                     __attribute__ ((__nonnull__ (2)))
int vfwscanf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwscanf( __stream, __format, __local_argv );
}




inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int fwprintf (FILE *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int wprintf (const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfwprintf( (__acrt_iob_func(1)), __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vfwprintf (FILE *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( __stream, __format, __local_argv );
}

inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (1)))
int vwprintf (const wchar_t *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfwprintf( (__acrt_iob_func(1)), __format, __local_argv );
}
# 1102 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int snwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



inline __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vsnwprintf (wchar_t *__stream, size_t __n, const wchar_t *__format, __builtin_va_list __local_argv)
{



  return __mingw_vsnwprintf( __stream, __n, __format, __local_argv );
}
# 1255 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t __attribute__((__cdecl__)) fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fgetwchar(void);
  wint_t __attribute__((__cdecl__)) fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t __attribute__((__cdecl__)) _fputwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) getwc(FILE *_File);
  wint_t __attribute__((__cdecl__)) getwchar(void);
  wint_t __attribute__((__cdecl__)) putwc(wchar_t _Ch,FILE *_File);
  wint_t __attribute__((__cdecl__)) putwchar(wchar_t _Ch);
  wint_t __attribute__((__cdecl__)) ungetwc(wint_t _Ch,FILE *_File);
  wchar_t *__attribute__((__cdecl__)) fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int __attribute__((__cdecl__)) fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _putws(const wchar_t *_Str);
# 1337 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
# 1367 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);



# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\swprintf.inl" 1 3
# 25 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\swprintf.inl" 3
static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int vswprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, __builtin_va_list __local_argv)
{
  return vsnwprintf( __stream, __count, __format, __local_argv );
}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (3)))
int swprintf (wchar_t *__stream, size_t __count, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __count, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}



extern "C++" {

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int vswprintf (wchar_t *__stream, const wchar_t *__format, __builtin_va_list __local_argv)
{

  return __mingw_vswprintf( __stream, __format, __local_argv );



}

static __attribute__ ((__unused__)) __inline__ __attribute__((__cdecl__))
                                                      __attribute__ ((__nonnull__ (2)))
int swprintf (wchar_t *__stream, const wchar_t *__format, ...)
{
  int __retval;
  __builtin_va_list __local_argv;

  __builtin_va_start( __local_argv, __format );
  __retval = vswprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

}
# 1373 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 2 3
# 1382 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t *__restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;





  __attribute__ ((__dllimport__)) FILE *__attribute__((__cdecl__)) _wpopen(const wchar_t *_Command,const wchar_t *_Mode);




  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _wtmpnam(wchar_t *_Buffer);
# 1411 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  inline wint_t __attribute__((__cdecl__)) getwchar() {return (fgetwc((__acrt_iob_func(0)))); }
  inline wint_t __attribute__((__cdecl__)) putwchar(wchar_t _C) {return (fputwc(_C,(__acrt_iob_func(1)))); }
# 1442 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void __attribute__((__cdecl__)) _unlock_file(FILE *_File);
# 1460 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  char *__attribute__((__cdecl__)) tempnam(const char *_Directory,const char *_FilePrefix) ;
  int __attribute__((__cdecl__)) fcloseall(void) ;
  FILE *__attribute__((__cdecl__)) fdopen(int _FileHandle,const char *_Format) ;
  int __attribute__((__cdecl__)) fgetchar(void) ;
  int __attribute__((__cdecl__)) fileno(FILE *_File) ;
  int __attribute__((__cdecl__)) flushall(void) ;
  int __attribute__((__cdecl__)) fputchar(int _Ch) ;
  int __attribute__((__cdecl__)) getw(FILE *_File) ;
  int __attribute__((__cdecl__)) putw(int _Ch,FILE *_File) ;
  int __attribute__((__cdecl__)) rmtmp(void) ;
# 1486 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __mingw_str_wide_utf8 (const wchar_t * const wptr, char **mbptr, size_t * buflen);
# 1500 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __mingw_str_utf8_wide (const char *const mbptr, wchar_t ** wptr, size_t * buflen);
# 1509 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
void __attribute__((__cdecl__)) __mingw_str_free(void *ptr);






  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnl(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnle(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlp(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnlpe(int _Mode,const wchar_t *_Filename,const wchar_t *_ArgList,...);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnv(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnve(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvp(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _wspawnvpe(int _Mode,const wchar_t *_Filename,const wchar_t *const *_ArgList,const wchar_t *const *_Env);
# 1540 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 3
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnv(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnve(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvp(int _Mode,const char *_Filename,const char *const *_ArgList);
  __attribute__ ((__dllimport__)) intptr_t __attribute__((__cdecl__)) _spawnvpe(int _Mode,const char *_Filename,const char *const *_ArgList,const char *const *_Env);




}


       
       
       
       

#pragma pack(pop)

# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 1 3
# 9 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 3
# 1 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 1 3
# 10 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 2 3
# 21 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 3
extern "C" {







  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) clearerr_s(FILE *_File);

  size_t __attribute__((__cdecl__)) fread_s(void *_DstBuf,size_t _DstSize,size_t _ElementSize,size_t _Count,FILE *_File);
# 494 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 3
  int __attribute__((__cdecl__)) fprintf_s(FILE *_File,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fscanf_s(FILE *_File, const char *_Format, ...);
  int __attribute__((__cdecl__)) printf_s(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scanf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) scanf_s(const char *_Format, ...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c(char *_DstBuf,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fscanf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sscanf_s_l(const char *_Src,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) sscanf_s(const char *_Src,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s(const char *_Src,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snscanf_s_l(const char *_Src,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  int __attribute__((__cdecl__)) vfprintf_s(FILE *_File,const char *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vprintf_s(const char *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,va_list _ArgList);

  __attribute__((dllimport)) int __attribute__((__cdecl__)) vsprintf_s(char *_DstBuf,size_t _Size,const char *_Format,va_list _ArgList);

  __attribute__((dllimport)) int __attribute__((__cdecl__)) sprintf_s(char *_DstBuf,size_t _DstSize,const char *_Format,...);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,...);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p(FILE *_File,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p(const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p(FILE *_File,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p(char *_Dst,size_t _MaxCount,const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p(const char *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscprintf_p(const char *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_p_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_l(char *_DstBuf,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_l(char *_DstBuf,const char *_Format,_locale_t,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_p_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scprintf_p_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscprintf_p_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _printf_s_l(const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vprintf_s_l(const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfprintf_s_l(FILE *_File,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _sprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsprintf_s_l(char *_DstBuf,size_t _DstSize,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_s_l(char *_DstBuf,size_t _DstSize,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_l(char *_DstBuf,size_t _MaxCount,const char *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnprintf_c_l(char *_DstBuf,size_t _MaxCount,const char *,_locale_t _Locale,va_list _ArgList);


  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) vsnprintf_s(char (&_DstBuf)[__size], size_t _MaxCount, const char* _Format, va_list _ArgList) { return vsnprintf_s(_DstBuf,__size,_MaxCount,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _vsnprintf_s(char (&_DstBuf)[__size], size_t _MaxCount, const char* _Format, va_list _ArgList) { return _vsnprintf_s(_DstBuf,__size,_MaxCount,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) vsprintf_s(char (&_DstBuf)[__size], const char* _Format, va_list _ArgList) { return vsprintf_s(_DstBuf,__size,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) sprintf_s(char (&_DstBuf)[__size], const char* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = vsprintf_s(_DstBuf,__size,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _snprintf_s(char (&_DstBuf)[__size], size_t _MaxCount, const char* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = _vsnprintf_s(_DstBuf,__size,_MaxCount,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) fopen_s(FILE **_File,const char *_Filename,const char *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) freopen_s(FILE** _File, const char *_Filename, const char *_Mode, FILE *_Stream);

  __attribute__ ((__dllimport__)) char* __attribute__((__cdecl__)) gets_s(char*,rsize_t);
  extern "C++" { template <size_t __size> inline char* __attribute__((__cdecl__)) get_s(char (&_DstBuf)[__size]) { return get_s(_DstBuf,__size); } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) tmpnam_s(char*,rsize_t);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) tmpnam_s(char (&_DstBuf)[__size]) { return tmpnam_s(_DstBuf,__size); } }




  __attribute__ ((__dllimport__)) wchar_t *__attribute__((__cdecl__)) _getws_s(wchar_t *_Str,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline wchar_t* __attribute__((__cdecl__)) _getws_s(wchar_t (&_DstBuf)[__size]) { return _getws_s(_DstBuf,__size); } }
# 786 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 3
  int __attribute__((__cdecl__)) fwprintf_s(FILE *_File,const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) wprintf_s(const wchar_t *_Format,...);
  int __attribute__((__cdecl__)) vfwprintf_s(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  int __attribute__((__cdecl__)) vwprintf_s(const wchar_t *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) vswprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,va_list _ArgList);

  int __attribute__((__cdecl__)) swprintf_s(wchar_t *_Dst,size_t _SizeInWords,const wchar_t *_Format,...);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);

  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s(wchar_t *_DstBuf,size_t _DstSizeInWords,size_t _MaxCount,const wchar_t *_Format,...);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_s_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_s_l(wchar_t *_DstBuf,size_t _DstSize,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_s_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fwscanf_s(FILE *_File, const wchar_t *_Format, ...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_s_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) swscanf_s(const wchar_t *_Src,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_s_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_s_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) wscanf_s(const wchar_t *_Format, ...);


  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) vswprintf_s(wchar_t (&_Dst)[__size], const wchar_t* _Format, va_list _ArgList) { return vswprintf_s(_Dst,__size,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) swprintf_s(wchar_t (&_Dst)[__size], const wchar_t* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = vswprintf_s(_Dst,__size,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _vsnwprintf_s(wchar_t (&_DstBuf)[__size], size_t _MaxCount, const wchar_t* _Format, va_list _ArgList) { return _vsnwprintf_s(_DstBuf,__size,_MaxCount,_Format,_ArgList); } }
  extern "C++" { template <size_t __size> inline int __attribute__((__cdecl__)) _snwprintf_s(wchar_t (&_DstBuf)[__size], size_t _MaxCount, const wchar_t* _Format, ...) { va_list __vaargs; __builtin_va_start(__vaargs,_Format); int __retval = _vsnwprintf_s(_DstBuf,__size,_MaxCount,_Format,__vaargs); __builtin_va_end(__vaargs); return __retval; } }

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wfreopen_s(FILE **_File,const wchar_t *_Filename,const wchar_t *_Mode,FILE *_OldFile);

  __attribute__ ((__dllimport__)) errno_t __attribute__((__cdecl__)) _wtmpnam_s(wchar_t *_DstBuf,size_t _SizeInWords);
  extern "C++" { template <size_t __size> inline errno_t __attribute__((__cdecl__)) _wtmpnam_s(wchar_t (&_DstBuf)[__size]) { return _wtmpnam_s(_DstBuf,__size); } }


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p(FILE *_File,const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p(const wchar_t *_Format,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p(FILE *_File,const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p(const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vswprintf_p(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p(const wchar_t *_Format,...);
  __attribute__((dllimport)) int __attribute__((__cdecl__)) _vscwprintf_p(const wchar_t *_Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vfwprintf_p_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_c_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vswprintf_p_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _scwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_p_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vsnwprintf_l(wchar_t *_DstBuf,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __swprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) __vswprintf_l(wchar_t *_Dest,const wchar_t *_Format,_locale_t _Plocinfo,va_list _Args);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _vscwprintf_l(const wchar_t *_Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fwscanf_l(FILE *_File,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _swscanf_l(const wchar_t *_Src,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _snwscanf_l(const wchar_t *_Src,size_t _MaxCount,const wchar_t *_Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _wscanf_l(const wchar_t *_Format,_locale_t _Locale,...);
# 872 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\sec_api\\stdio_s.h" 3
}
# 1559 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\x86_64-w64-mingw32\\include\\stdio.h" 2 3
# 43 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 2 3
# 96 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 3
namespace __gnu_cxx
{
# 175 "c:\\users\\bmathieu\\desktop\\mingw\\mingw\\include\\c++\\11.2.0\\cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 7 "file.hpp" 2




# 10 "file.hpp"
namespace lib
{
  struct ios_exception { };
  struct file_opening_failed : public ios_exception { };
  struct null_file_descriptor : public ios_exception { };
  struct opened_file_flushing_failed : public ios_exception { };
  struct opened_file_closing_failed : public ios_exception { };
  struct opened_file_writing_failed : public ios_exception { };

  struct file
  {
    std::FILE *fd = nullptr;

    file(std::FILE *f) noexcept : fd(f) {}

    inline bool opened() const
    {
      return fd == nullptr;
    }

    inline bool has_error() const
    {
      return fd == nullptr or
             std::ferror(fd) != 0;
    }

    inline bool eof() const
    {
      return fd == nullptr or
             std::feof(fd) != 0;
    }

    template <character char_t>
    void push_back(const char_t &c)
    {
      std::fputc(c, fd);
    }

    template <typename type_t, typename limit_t>
    inline void write(span<type_t, limit_t> s)
    {
      std::fwrite(s.data(), sizeof(type_t), s.size(), fd);
    }

    long size() const
    {
      std::fseek(fd, 0L, 
# 56 "file.hpp" 3
                        2
# 56 "file.hpp"
                                );
      long sz = std::ftell(fd);
      std::fseek(fd, 0L, 
# 58 "file.hpp" 3
                        0
# 58 "file.hpp"
                                );
      return sz;
    }






  };

  inline file fopen(string_view filename, string_view mode)
  {
    file f(std::fopen(filename.data(), mode.data()));
    return f;
  }

  inline void fclose(file &f)
  {
    std::fclose(f.fd);
    f.fd = nullptr;
  }

  inline void fflush(file &f)
  {
    std::fflush(f.fd);
  }

  inline file cout(
# 86 "file.hpp" 3
                  (__acrt_iob_func(1))
# 86 "file.hpp"
                        );
  inline file cin(
# 87 "file.hpp" 3
                 (__acrt_iob_func(0))
# 87 "file.hpp"
                      );
  inline file cerr(
# 88 "file.hpp" 3
                  (__acrt_iob_func(2))
# 88 "file.hpp"
                        );
}
# 9 "format.hpp" 2
# 1 "array.hpp" 1





namespace lib
{
  template <typename type_t, unsigned n>
  requires(n > 0) struct array
  {
    type_t _data[n];

    constexpr unsigned size() const { return n; }
    constexpr bool empty() const { return size() == 0; }
    constexpr type_t *data() { return _data; }
    constexpr const type_t *data() const { return _data; }
    constexpr type_t *begin() { return _data; }
    constexpr type_t *end() { return _data + n; }
    constexpr const type_t *begin() const { return _data; }
    constexpr const type_t *end() const { return _data + n; }
    constexpr type_t &front() { return *begin(); }
    constexpr const type_t &front() const { return *begin(); }
    constexpr type_t &back() { return *(end() - 1); }
    constexpr const type_t &back() const { return *(end() - 1); }
    constexpr type_t &operator[](unsigned i) { return _data[i]; }
    constexpr const type_t &operator[](unsigned i) const { return _data[i]; }
  };
}
# 10 "format.hpp" 2

namespace lib
{
  template <character char_t>
  inline size_t length_of(
      const basic_string_view<char_t> &v)
  {
    return v.size();
  }

  template <character char_t, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      basic_string_view<char_t> v)
  {
    for (auto &&c : v)
      buff.push_back(c);
  }

  template <size_t n>
  inline size_t length_of(const char (&s)[n])
  {
    return n - 1;
  }

  template <size_t n, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      const char (&s)[n])
  {
    format_of(buff, basic_string_view<char>(s));
  }

  template <size_t n>
  inline size_t length_of(const wchar_t (&s)[n])
  {
    return n - 1;
  }

  template <size_t n, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      const wchar_t (&s)[n])
  {
    format_of(buff, basic_string_view<wchar_t>(s));
  }

  template <character char_t>
  inline size_t length_of(const char_t &c)
  {
    return 1;
  }

  template <typename buffer_t, character char_t>
  inline void format_of(
      buffer_t &buff, const char_t &c)
  {
    buff.push_back(c);
  }

  template <integer integral_t>
  inline unsigned length_of(const integral_t &i)
  {
    const integral_t v = i;




    if (v < 10)
      return 1;
    else if (v < 100)
      return 2;
    else if (v < 1000)
      return 3;
    else if (v < 10000)
      return 4;
    else if (v < 100000)
      return 5;
    else if (v < 1000000)
      return 5;
    else if (v < 10000000)
      return 7;
    else if (v < 100000000)
      return 8;
    else if (v < 1000000000)
      return 9;
    else if (v < 10000000000)
      return 10;
    else if (v < 100000000000)
      return 11;
    else if (v < 1000000000000)
      return 12;
    else if (v < 10000000000000)
      return 13;
    else if (v < 100000000000000)
      return 14;
    else if (v < 1000000000000000)
      return 15;
    else if (v < 10000000000000000)
      return 136;
    else if (v < 100000000000000000)
      return 17;
    else if (v < 1000000000000000000)
      return 18;
    else
      return 1;
  }

  template <integer integral_t,
            typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      integral_t t)
  {
    if (t == 0)
      buff.push_back('0');

    array<char, 50> tbuff;
    auto e = tbuff.end();
    auto i = e - 1;

    while (t != 0)
    {
      *i = "0123456789"[t % 10];
      --i;
      t /= 10;
    }

    if (i != e)
      ++i;

    for (; i != e; ++i)
      buff.push_back(*i);
  }

  template <character char_t>
  inline size_t length_of(const basic_string<char_t> &s)
  {
    return length_of(basic_string_view<char_t>(s.begin(), s.end()));
  }

  template <character char_t, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      const basic_string<char_t> &v)
  {
    format_of(buff, basic_string_view<char_t>(v.begin(), v.end()));
  }

  inline size_t length_of(const bool &s)
  {
    return s ? 4 : 5;
  }

  template <character char_t, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      const bool &v)
  {
    format_of(buff, v ? basic_string_view<char_t>("true")
                      : basic_string_view<char_t>("false"));
  }

  template <character char_t>
  inline size_t length_of(const vector<char_t> &v)
  {
    return length_of(basic_string_view<char_t>(v.begin(), v.end()));
  }

  template <character char_t, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      const vector<char_t> &v)
  {
    format_of(buff, basic_string_view<char_t>(v.begin(), v.end()));
  }
}

namespace lib::impl
{
  template <typename char_t>
  struct basic_format
  {
    basic_string_view<char_t> fmt;

    constexpr basic_format(
        basic_string_view<char_t> _fmt)
        : fmt(_fmt) {}
  };

  template <typename char_t,
            typename buffer_t>
  inline void format_of(
      buffer_t &ctx,
      basic_format<char_t> &fmt)
  {
    auto b = fmt.fmt.begin();
    auto e = fmt.fmt.end();

    while (b != e and *b != '#')
    {
      ctx.push_back(*b);
      ++b;
    }

    if (b != e)
      ++b;

    fmt.fmt = basic_string_view<char_t>(b, e);
  }

  template <typename... args_t>
  inline size_t all_length_of(
      const args_t &...args)
  {
    return (length_of(args) + ... + 0);
  }

  template <typename char_t,
            typename... args_t>
  inline basic_string<char_t>
  format(basic_string_view<char_t> fmt,
         const args_t &...args)
  {
    basic_string<char_t> buff(all_length_of(fmt, args...));
    basic_format bfmt(fmt);
    ((format_of(buff, bfmt), format_of(buff, args)), ..., format_of(buff, bfmt.fmt));
    return buff;
  }

  template <typename char_t, typename... args_t>
  inline void fformat(
      file &out,
      basic_string_view<char_t> fmt,
      const args_t &...args)
  {
    basic_format<char_t> bfmt(fmt);
    ((format_of(out, bfmt), format_of(out, args)), ..., format_of(out, bfmt.fmt));
  }
}

namespace lib
{
  template <typename... args_t>
  inline basic_string<char>
  format(basic_string_view<char> fmt,
         const args_t &...args)
  {
    return impl::format(fmt, args...);
  }

  template <typename... args_t>
  inline basic_string<wchar_t>
  format(basic_string_view<wchar_t> fmt,
         const args_t &...args)
  {
    return impl::format(fmt, args...);
  }

  template <typename... args_t>
  inline void fformat(
      file &out,
      basic_string_view<char> fmt,
      const args_t &...args)
  {
    impl::fformat(out, fmt, args...);
  }

  template <typename... args_t>
  inline void fformat(
      file &out,
      basic_string_view<wchar_t> fmt,
      const args_t &...args)
  {
    impl::fformat(out, fmt, args...);
  }
}
# 5 "test.hpp" 2
# 1 "format-ansi.hpp" 1
# 9 "format-ansi.hpp"
namespace lib
{
# 21 "format-ansi.hpp"
  template <character char_t>
  struct style
  {
    basic_string_view<char_t> code;
  };

  template <character char_t, size_t n>
  struct combined_style
  {
    array<style<char_t>, n> styles;
  };

  template <
      character char_t,
      size_t n,
      typename type_t>
  struct styled_object
  {
    array<style<char_t>, n> styles;
    const type_t &obj;
  };

  constexpr style<char> black{"\u001b[30m"};
  constexpr style<char> red{"\u001b[31m"};
  constexpr style<char> green{"\u001b[32m"};
  constexpr style<char> yellow{"\u001b[33m"};
  constexpr style<char> blue{"\u001b[34m"};
  constexpr style<char> magenta{"\u001b[35m"};
  constexpr style<char> cyan{"\u001b[36m"};
  constexpr style<char> white{"\u001b[37m"};

  constexpr style<char> bblack{"\u001b[40m"};
  constexpr style<char> bred{"\u001b[41m"};
  constexpr style<char> bgreen{"\u001b[42m"};
  constexpr style<char> byellow{"\u001b[43m"};
  constexpr style<char> bblue{"\u001b[44m"};
  constexpr style<char> bmagenta{"\u001b[45m"};
  constexpr style<char> bcyan{"\u001b[46m"};
  constexpr style<char> bwhite{"\u001b[47m"};

  constexpr style<char> bold{"\u001b[1m"};
  constexpr style<char> underline{"\u001b[4m"};
  constexpr style<char> reversed{"\u001b[7m"};
  constexpr style<char> reset{"\u001b[0m"};

  constexpr style<char> cup{"\u001b[1A"};
  constexpr style<char> cdown{"\u001b[1B"};
  constexpr style<char> cright{"\u001b[1C"};
  constexpr style<char> cleft{"\u001b[1D"};

  template <character char_t>
  consteval combined_style<char_t, 2>
  operator|(
      style<char_t> s1,
      style<char_t> s2)
  {
    return {{s1, s2}};
  }

  template <character char_t, size_t n>
  consteval combined_style<char_t, n + 1>
  operator|(
      combined_style<char_t, n> s1,
      style<char_t> s2)
  {
    combined_style<char_t, n + 1> s;
    lib::copy_all(
        s1.styles.begin(),
        s1.styles.end(),
        s.styles.begin());
    s.styles[n] = s2;
    return s;
  }

  template <character char_t, size_t n>
  consteval combined_style<char_t, n + 1>
  operator|(
      style<char_t> s1,
      combined_style<char_t, n> s2)
  {
    combined_style<char_t, n + 1> s;
    lib::copy_all(
        s1.styles.begin() + 1,
        s1.styles.end(),
        s.styles.begin());
    s.styles[0] = s2;
    return s;
  }

  template <
      character char_t,
      typename type_t>
  constexpr styled_object<char_t, 1, type_t>
  operator|(
      style<char_t> s,
      const type_t &o)
  {
    return {{s}, o};
  }

  template <
      character char_t,
      size_t n,
      typename type_t>
  constexpr styled_object<char_t, n, type_t>
  operator|(
      combined_style<char_t, n> s,
      const type_t &o)
  {
    return {s.styles, o};
  }

  template <typename char_t, size_t n,
            typename type_t>
  constexpr size_t length_of(
      const styled_object<char_t, n, type_t> &so)
  {
    return n * 5;
  }

  template <typename char_t, size_t n,
            typename type_t, typename buffer_t>
  inline void format_of(
      buffer_t &buff,
      const styled_object<char_t, n, type_t> &so)
  {
    for (auto &&s : so.styles)
      format_of(buff, s.code);
    format_of(buff, so.obj);
    format_of(buff, reset.code);
  }

}
# 6 "test.hpp" 2
# 1 "ios.hpp" 1







namespace lib
{
  inline void fprint(file &out, string_view s)
  {
    out.write(s);
  }

  inline void fprintln(file &out, string_view s)
  {
    fprint(out, s);
    out.push_back('\n');
  }

  template <typename... args_t>
  inline void fprintf(file &out, string_view f, const args_t &...args)
  {
    fformat(out, f, args...);
  }

  template <typename... args_t>
  inline void fprintfln(file &out, string_view f, const args_t &...args)
  {
    fprintf(out, f, args...);
    fprintln(out, "");
  }

  inline void print(string_view s)
  {
    fprint(cout, s);
  }

  template <typename... args_t>
  inline void printf(string_view f, const args_t &...args)
  {
    fprintf(cout, f, args...);
  }

  inline void println(string_view s)
  {
    fprintln(cout, s);
  }

  template <typename... args_t>
  inline void printfln(string_view f, const args_t &...args)
  {
    fprintfln(cout, f, args...);
  }
}

namespace lib
{
  inline void fprint(file &out, wstring_view s)
  {
    out.write(s);
  }

  inline void fprintln(file &out, wstring_view s)
  {
    fprint(out, s);
    out.push_back('\n');
  }

  template <typename... args_t>
  inline void fprintf(file &out, wstring_view f, const args_t &...args)
  {
    fformat(out, f, args...);
  }

  template <typename... args_t>
  inline void fprintfln(file &out, wstring_view f, const args_t &...args)
  {
    fprintf(out, f, args...);
    fprintln(out, "\n");
  }

  inline void print(wstring_view s)
  {
    fprint(cout, s);
  }

  template <typename... args_t>
  inline void printf(wstring_view f, const args_t &...args)
  {
    fprintf(cout, f, args...);
  }

  inline void println(wstring_view s)
  {
    fprintln(cout, s);
  }

  template <typename... args_t>
  inline void printfln(wstring_view f, const args_t &...args)
  {
    fprintfln(cout, f, args...);
  }
}
# 7 "test.hpp" 2
# 2 "array.test.cpp" 2


void should_build_empty_array()
{
  lib::array<int, 1> arr;
  lib::printfln("===== at l.# test # == # : #", 7, ("arr.size()"), ("1"), (((arr.size()) == (1)) ? (lib::bold | lib::green | "OK") : (lib::bold | lib::red | "KO")));;
  lib::printfln("===== at l.# test # == # : #", 8, ("arr.begin()"), ("arr.data()"), (((arr.begin()) == (arr.data())) ? (lib::bold | lib::green | "OK") : (lib::bold | lib::red | "KO")));;
  lib::printfln("===== at l.# test # == # : #", 9, ("arr.end()"), ("arr.begin() + arr.size()"), (((arr.end()) == (arr.begin() + arr.size())) ? (lib::bold | lib::green | "OK") : (lib::bold | lib::red | "KO")));;
}

void should_build_initialized_array()
{
  lib::array<int, 2> arr = {1, 2};
  lib::printfln("===== at l.# test # == # : #", 15, ("arr.size()"), ("2"), (((arr.size()) == (2)) ? (lib::bold | lib::green | "OK") : (lib::bold | lib::red | "KO")));;
  lib::printfln("===== at l.# test # == # : #", 16, ("arr[0]"), ("1"), (((arr[0]) == (1)) ? (lib::bold | lib::green | "OK") : (lib::bold | lib::red | "KO")));;
  lib::printfln("===== at l.# test # == # : #", 17, ("arr[1]"), ("2"), (((arr[1]) == (2)) ? (lib::bold | lib::green | "OK") : (lib::bold | lib::red | "KO")));;
}

int main()
{
  lib::println("\n--------------------------"); lib::printfln("=  test file #", "array.test.cpp"); lib::printfln("=== run #", "should_build_empty_array"); should_build_empty_array();;
  lib::println("\n--------------------------"); lib::printfln("=  test file #", "array.test.cpp"); lib::printfln("=== run #", "should_build_initialized_array"); should_build_initialized_array();;
}
